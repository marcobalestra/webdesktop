const buildMabroMenu=($m,mbicon)=>{if(!$(".mabro-menu-title",$m).length){var $about=glob.uid("menu-");const $mbcont=$('<div class="dropdown"></div>');$mbcont.append(`<button class="btn btn-link mabro-menu-title dropdown-toggle" id="${$about}" type="button" data-toggle="dropdown" aria-expanded="false">${mbicon}</button>`);const $mbtent=$(`<div class="dropdown-menu" aria-labelledby="${$about}"></div>`);$about=$(`<a class="dropdown-item" href="#">${_l("menu-mabro-About")}</a>`);$mbtent.append($about),$mbcont.append($mbtent),$m.append($mbcont)}return $(".mabro-menu-content",$m).length||$m.append('<div class="mabro-menu-content"></div>'),$(".mabro-menu-content",$m)},getClass=async mb=>{return class{#prop;#menu;constructor(manifest){this.#prop={},this.#prop.registered={system:[],apps:[]},this.#prop.manifest=manifest,this.#prop.mb=mb,this.#prop.target=$("body > .mabro-main-container > .mabro-menu-wrap"),$(document.body).on("mabro:changedApp",()=>{this.refresh()})}async init(){glob.localize.loaded?this.#prop.menus=buildMabroMenu(this.#prop.target,(await mb.getManifest()).app_icon):setTimeout(()=>{this.init(mb)},100)}async refresh(){}}};export default getClass;