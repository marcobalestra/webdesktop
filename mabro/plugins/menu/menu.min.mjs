const makeMenu=(node,funcarray)=>{"string"==typeof node&&(node=$("<label></label>").append(node));const $m=$(node);if($m.hasClass("mabro-menu-toggler"))return $m;{const $mbmenu=$('<div class="dropdown mabro-menu-toggler"></div>').append($m);return $mbmenu.on("click",e=>{handleMenu(e,funcarray)}),$mbmenu}},handleMenu=(me,funcarray)=>{me.preventDefault(),me.stopPropagation();let $p=$(me.target);$p.hasClass("mabro-menu-toggler")||($p=$p.closest(".mabro-menu-toggler"));const obj={highlight:$p,parent:$p,type:"menu"};"function"==typeof funcarray?funcarray().then(items=>{obj.content=items,glob.menu(me.originalEvent||me,obj)}):Array.isArray(funcarray)&&(obj.content=funcarray,glob.menu(me.originalEvent||me,obj))},mabroMenuItems=async mb=>{const items=[];return items.push({icon:_icon("mabro-app"),label:_l("menu-mabro-About-app",{app:"MaBro.app"}),action:()=>{mb.plugin("about",mb.getProp("mabro_base")+"about.html")}}),items},buildMabroMenu=async($m,mb)=>{var $mbmenu;return $m.hasClass("mabro-menu-inited")||($mbmenu=makeMenu($(_icon("mabro-app")),()=>mabroMenuItems(mb)),$m.append($mbmenu),$m.append('<div class="mabro-menu-bars"></div>'),$m.addClass("mabro-menu-inited")),$(".mabro-menu-bars",$m)},makeAppMenu=(mb,app)=>{var m=app.getManifest();return makeMenu(m.app_icon?$(m.app_icon):m.app_name||"App",()=>appMenuItems(mb,app))},appMenuItems=async(mb,app)=>{const items=[],m=app.getManifest();if(m){const about={label:_l("menu-mabro-About-app",{app:m.app_name||m.base_uri}),action:()=>{mb.plugin("about",{manifest:m})}};m.app_icon&&(about.icon=m.app_icon),items.push(about)}const ws=app.windows();return ws&&Array.isArray(ws)&&ws.length&&(items.length&&items.push("-"),ws.forEach(w=>{w.active()?items.push({label:"❖ "+w.title()}):items.push({label:w.title(),action:()=>{app.activateWindow(w)}})})),app.isSystem()||(items.length&&items.push("-"),items.push({label:_l("menu-Quit"),action:()=>{app.quit()}})),items},getClass=async mb=>{return class{#prop;#menu;constructor(manifest){this.#prop={},this.#prop.registered={system:[],apps:[]},this.#prop.manifest=manifest,this.#prop.mb=mb,this.#prop.target=$("body > .mabro-main-container > .mabro-menubar-wrap"),$(document.body).on("mabro:changedApp",()=>{setTimeout(()=>{this.refresh()},100)})}async init(){glob.localize.loaded?(this.#prop.menus=await buildMabroMenu(this.#prop.target,mb),this.refresh()):setTimeout(()=>{this.init(mb)},100)}registerMenuBar(app,aa){if(this.#prop.menus){var $appmenu=app.getUri();let $mb=$(`.mabro-menu-bar[for="${$appmenu}"]`,this.#prop.menus);$mb.length||($mb=$(`<div for="${$appmenu}" class="mabro-menu-bar"></div>`),this.#prop.menus.append($mb)),$mb.empty();$appmenu=makeAppMenu(this.#prop.mb,app);$appmenu&&$mb.append($appmenu),Array.isArray(aa)&&aa.filter(a=>a.label).forEach($t=>{$t=makeMenu($t.label,$t.items);$mb.append($t)}),this.refresh()}else setTimeout(()=>{this.registerMenuBar(app,aa)},100)}async refresh(){if(this.#prop.menus){const apps=this.#prop.mb.apps(),keys=Object.keys(apps).filter(k=>apps[k].running);var aa=($(document.body).data("mabro")||{}).activeApp;$(".mabro-menu-bar[for]",this.#prop.menus).removeClass("mabro-active"),$(".mabro-menu-bar[for]",this.#prop.menus).each((idx,mb)=>{keys.includes($(mb).attr("for"))||$(mb).remove()}),aa&&$(`.mabro-menu-bar[for="${aa}"]`,this.#prop.menus).addClass("mabro-active")}}}};export default getClass;