const buildMember=(k,x)=>{const $out=$(`<div for="${k}"></div>`);return console.log(x),x.running&&$out.addClass("running"),$out.append(x.manifest.app_icon||_icon("unknown_app")),$out},getClass=async mb=>{return class{#prop;constructor(manifest){this.#prop={},this.#prop.registered={system:[],apps:[]},this.#prop.manifest=manifest,this.#prop.mb=mb,this.#prop.target=$("body > .mabro-dock-wrapper > .mabro-dock-content")}async render(){this.#prop.target.empty();const apps=this.#prop.mb.apps(),syskeys=Object.keys(apps).filter(x=>x.system),appkeys=Object.keys(apps).filter(x=>!x.system);syskeys.forEach(k=>this.#prop.target.append(buildMember(k,apps[k]))),appkeys.forEach(k=>this.#prop.target.append(buildMember(k,apps[k])))}async refresh(){const apps=this.#prop.mb.apps();$("div[for]",this.#prop.target).removeClass("running"),Object.keys(apps).filter(k=>apps[k].running).forEach(k=>{$(`div[for="${k}"]`,this.#prop.target).addClass("running")})}}};export default getClass;