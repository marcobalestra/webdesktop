const cache={loaded:{}},loadCSS=(mb,cssfiles)=>{const h=document.documentElement.querySelector("head")||document.body;let count=0;return cssfiles.forEach(c=>{if("string"==typeof c?c=$('<link rel="stylesheet" charset="utf-8" />').attr("href",c):c instanceof HTMLElement&&(c=$(c)),c instanceof jQuery)if($(`link[href="${c.attr("href")}"]`,h).length)console.debug("[MB.loadCSS] Duplicated CSS",c);else{c.on("error",e=>{console.debug("[MB.loadCSS] Error loading CSS",c,e)});try{$(h).append(c),count++}catch(e){console.debug("[MB.loadCSS] Error trying to load CSS",c,e)}}else console.debug("[MB.loadCSS] Error loading CSS: need string, node or jquery objects",c)}),count},loadLocales=(manifest,prefix)=>{if(Array.isArray(manifest.locales)){const ls=[];manifest.locales.includes("en")&&ls.push("en"),manifest.locales.includes("multi")&&ls.push("multi"),manifest.locales.includes("icon")&&ls.push("icon"),"en"!==_lang&&manifest.locales.includes(_lang)&&ls.push(_lang),ls.length&&ls.forEach(l=>{var uri=manifest.base_uri+manifest.locales_dir+l+manifest.locales_suffix;cache.loaded[uri]||(glob.localize.loadjs(uri,l,!0,prefix),cache.loaded[uri]=!0)})}},getClass=async pars=>{const MB=class{#prop;#fs;constructor(){this.#prop=JSON.parse(JSON.stringify(pars)),this.#prop.manifests={},this.#prop.plugins={},this.#prop.pluginsingletons={}}static init=async mb=>{mb.loadCSS(mb.getProp("mabro_base")+"css/mabro.css"),"object"!=typeof glob.localize.main&&(glob.localize.main={}),"object"!=typeof glob.localize.main.icon&&(glob.localize.main.icon={}),mb.getManifest(mb.getProp("mabro_base")).then(man=>{loadLocales(man)});const fs=await mb.getFs();fs.boot()};async init(){return await MB.init(this)}async dialog(options){return await this.plugin("dialog",options)}loadCSS(...args){return loadCSS.call(window,this,args)}getProp(pname){return this.#prop[pname]}async getManifest(uri){return uri=uri.replace(/\/[^\/]*$/,"/"),this.#prop.manifests[uri]||(this.#prop.manifests[uri]=await glob.get(uri+"manifest.json")||{error:"Not found"},this.#prop.manifests[uri].base_uri=uri,this.#prop.manifests[uri].app_icon&&this.#prop.manifests[uri].app_name&&(glob.localize.main.icon["app_"+this.#prop.manifests[uri].app_name]=this.#prop.manifests[uri].app_icon)),this.#prop.manifests[uri]}async getFs(){return void 0===this.#fs&&(this.#fs=this.plugin("fs")),this.#fs}async plugin(pluginName,o,uri){const pc=await this.pluginClass(pluginName,uri);if(pc){if(pc.manifest.singleton&&this.#prop.pluginsingletons[pluginName])return this.#prop.pluginsingletons[pluginName];o=new pc.classfunc(pc.manifest,o);return pc.manifest.singleton&&(this.#prop.pluginsingletons[pluginName]=o),o}return!1}async pluginClass(pluginName,manifest,classInitData){if(void 0===this.#prop.plugins[pluginName]){manifest||(void 0===classInitData&&(classInitData=this),manifest=this.getProp("mabro_base")+"plugins/"+pluginName+"/");manifest=await this.getManifest(manifest);if(manifest&&"object"==typeof manifest&&(loadLocales(manifest),this.#prop.plugins[pluginName]={manifest:manifest},manifest.script)){let mod,cl;try{mod=await import(`${manifest.base_uri}${manifest.script}`)}catch(e){console.log("Error loading plugin script",manifest,e)}if(mod)try{"function"==typeof(cl=await mod.default(classInitData))&&(this.#prop.plugins[pluginName].classfunc=cl)}catch(e){console.log("Error loading plugin class",manifest,e)}}}return this.#prop.plugins[pluginName]}};return MB};export default getClass;