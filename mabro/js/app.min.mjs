const cache={loaded:{}},loadCSS=(mb,cssfiles)=>{const h=document.documentElement.querySelector("head")||document.body;let count=0;return cssfiles.forEach(c=>{if("string"==typeof c?c=$('<link rel="stylesheet" charset="utf-8" />').attr("href",c):c instanceof HTMLElement&&(c=$(c)),c instanceof jQuery)if($(`link[href="${c.attr("href")}"]`,h).length)console.debug("[MB.loadCSS] Duplicated CSS",c);else{c.on("error",e=>{console.debug("[MB.loadCSS] Error loading CSS",c,e)});try{$(h).append(c),count++}catch(e){console.debug("[MB.loadCSS] Error trying to load CSS",c,e)}}else console.debug("[MB.loadCSS] Error loading CSS: need string, node or jquery objects",c)}),count},loadLocales=manifest=>{Array.isArray(manifest.locales)&&manifest.locales.forEach(l=>{var uri=manifest.base_uri+manifest.locales_dir+l+manifest.locales_suffix;cache.loaded[uri]||(glob.localize.loadjs(uri,l,!0),cache.loaded[uri]=!0)})},getClass=async pars=>{const MB=class{#prop;constructor(){this.#prop=JSON.parse(JSON.stringify(pars)),this.#prop.manifests={}}static init=async mb=>{mb.loadCSS(mb.getProp("mabro_base")+"/css/mabro.css"),mb.getManifest(mb.getProp("mabro_base")).then(man=>{loadLocales(man)})};async init(){return await MB.init(this)}loadCSS(...args){return loadCSS.call(window,this,args)}getProp(pname){return this.#prop[pname]}async getManifest(uri){return uri=uri.replace(/\/[^\/]*$/,"/"),this.#prop.manifests[uri]||(this.#prop.manifests[uri]=await glob.get(uri+"manifest.json")||{error:"Not found"},this.#prop.manifests[uri].base_uri=uri),this.#prop.manifests[uri]}};return MB};export default getClass;