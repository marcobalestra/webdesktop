const cache={loaded:{}},loadCSS=(mb,cssfiles)=>{const h=document.documentElement.querySelector("head")||document.body;let count=0;return cssfiles.forEach(c=>{if("string"==typeof c?c=$('<link rel="stylesheet" charset="utf-8" />').attr("href",c):c instanceof HTMLElement&&(c=$(c)),c instanceof jQuery)if($(`link[href="${c.attr("href")}"]`,h).length)console.debug("[MB.loadCSS] Duplicated CSS",c);else{c.on("error",e=>{console.debug("[MB.loadCSS] Error loading CSS",c,e)});try{$(h).append(c),count++}catch(e){console.debug("[MB.loadCSS] Error trying to load CSS",c,e)}}else console.debug("[MB.loadCSS] Error loading CSS: need string, node or jquery objects",c)}),count},loadLocales=(manifest,prefix)=>{if(Array.isArray(manifest.locales)){const ls=[];manifest.locales.includes("en")&&ls.push("en"),manifest.locales.includes("multi")&&ls.push("multi"),manifest.locales.includes("icon")&&ls.push("icon"),"en"!==_lang&&manifest.locales.includes(_lang)&&ls.push(_lang),ls.length&&ls.forEach(l=>{var uri=manifest.base_uri+manifest.locales_dir+l+manifest.locales_suffix;cache.loaded[uri]||(glob.localize.loadjs(uri,l,!0,prefix),cache.loaded[uri]=!0)})}},getClass=async pars=>{const MB=class{#prop;#fs;#dock;constructor(){this.#prop=JSON.parse(JSON.stringify(pars)),this.#prop.manifests={},this.#prop.plugins={},this.#prop.pluginsingletons={},this.#prop.apps={}}static init=async mb=>{mb.loadCSS(mb.getProp("mabro_base")+"css/mabro.css"),"object"!=typeof glob.localize.main&&(glob.localize.main={}),"object"!=typeof glob.localize.main.icon&&(glob.localize.main.icon={}),mb.getManifest(mb.getProp("mabro_base")).then(man=>{loadLocales(man)}),$(document.body).data("mabro",{}),(await mb.getFs()).boot()};async init(){if(this.#prop.skeleton)return await MB.init(this);$(document.body).load(this.getProp("mabro_base")+"skeleton.html",void 0,()=>{this.#prop.skeleton=!0,this.init()})}async start(){const wd=await this.app("webdesktop",{system:this,wrap:$("body>.mabro-main-container>.mabro-main-wrap>.mabro-webdesktop")});await this.getMenu();const apps=this.#fs.apps();apps.forEach(uri=>{this.app(uri)}),wd.api.event("run")}async launchedApp(uri){this.#prop.apps[uri]&&(this.#prop.apps[uri].running=!0),$(document.body).trigger("mabro:changedApp")}async app(uri,isSystem){if(uri.includes("/")||(uri=this.getProp("mabro_base")+"apps/"+uri+"/"),!this.#prop.apps[uri]){var manifest=await this.getManifest(uri);if(!manifest||"object"!=typeof manifest)return;loadLocales(manifest,uri);const appapi=await this.plugin("appapi");await appapi.init(uri,manifest,isSystem);const ao={manifest:manifest,api:appapi};isSystem=!(!isSystem||!isSystem.system);isSystem&&(ao.system=!0),manifest.name&&(ao.name=manifest.name),this.#prop.apps[uri]=ao,(await this.getDock()).render(),isSystem||this.#fs.apps(!0)}return this.#prop.apps[uri]}apps(){return this.#prop.apps}async dialog(options){return await this.plugin("dialog",options)}loadCSS(...args){return loadCSS.call(window,this,args)}getProp(pname){return this.#prop[pname]}async getManifest(uri){return uri=(uri=void 0===uri?this.getProp("mabro_base"):uri).replace(/\/[^\/]*$/,"/"),this.#prop.manifests[uri]||(this.#prop.manifests[uri]=await glob.get(uri+"manifest.json")||{error:"Not found"},this.#prop.manifests[uri].base_uri=uri,this.#prop.manifests[uri].app_icon&&this.#prop.manifests[uri].app_name&&(glob.localize.main.icon["app_"+this.#prop.manifests[uri].app_name]=this.#prop.manifests[uri].app_icon)),this.#prop.manifests[uri]}async getFs(){return void 0===this.#fs&&(this.#fs=await this.plugin("fs")),this.#fs}async getDock(){return void 0===this.#dock&&(this.#dock=await this.plugin("dock")),this.#dock}async getMenu(){return void 0===this.#prop.menu&&(this.#prop.menu=await this.plugin("menu"),this.#prop.menu.init()),this.#prop.menu}async plugin(pluginName,o,uri,classInitData){const pc=await this.pluginClass(pluginName,uri,classInitData);if(pc){if(pc.manifest.singleton&&this.#prop.pluginsingletons[pluginName])return this.#prop.pluginsingletons[pluginName];o=new pc.classfunc(pc.manifest,o);return pc.manifest.singleton&&(this.#prop.pluginsingletons[pluginName]=o),o}return!1}async pluginClass(pluginName,puri,classInitData){if(void 0===this.#prop.plugins[pluginName]){puri||(void 0===classInitData&&(classInitData=this),puri=this.getProp("mabro_base")+"plugins/"+pluginName+"/");const manifest=await this.getManifest(puri);if(manifest&&"object"==typeof manifest&&(loadLocales(manifest),this.#prop.plugins[pluginName]={manifest:manifest},"string"==typeof manifest.script)){manifest.script.includes("<mjs_suffix>")&&(manifest.script=manifest.script.replace(/\<mjs_suffix\>/,this.getProp("mjs_suffix")));let mod,cl;try{mod=await import(`${manifest.base_uri}${manifest.script}`)}catch(e){console.log("Error loading plugin script",manifest,e)}if(mod)try{"function"==typeof(cl=await mod.default(classInitData))&&(this.#prop.plugins[pluginName].classfunc=cl)}catch(e){console.log("Error loading plugin class",manifest,e)}}}return this.#prop.plugins[pluginName]}};return MB};export default getClass;